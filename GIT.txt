crea un repositorio nuevo
Crea un directorio nuevo, ábrelo y ejecuta
git init
para crear un nuevo repositorio de git.

hacer checkout a un repositorio
Crea una copia local del repositorio ejecutando
git clone /path/to/repository

Si utilizas un servidor remoto, ejecuta
git clone username@host:/path/to/repository

Para descargar este repositorio de github, en una terminal colocar
git clone https://github.com/josealaguerra/faq_doc.git


flujo de trabajo
Tu repositorio local esta compuesto por tres "árboles" administrados por git. 
El primero es tu Directorio de trabajo que contiene los archivos, 
el segundo es el Index que actua como una zona intermedia, 
y el último es el HEAD que apunta al último commit realizado.


add & commit
Puedes registrar cambios (añadirlos al Index) usando
git add <filename>
git add .

Este es el primer paso en el flujo de trabajo básico. Para hacer commit a estos cambios usa
git commit -m "Commit message"
Ahora el archivo esta incluído en el HEAD, pero aún no en tu repositorio remoto.

envío de cambios
Tus cambios están ahora en el HEAD de tu copia local. Para enviar estos cambios a tu repositorio remoto ejecuta
git push origin master (deprecated)
git push origin main

Reemplaza master por la rama a la que quieres enviar tus cambios.

Si no has clonado un repositorio ya existente y quieres conectar tu repositorio local a un repositorio remoto, usa
git remote add origin <server>
Ahora podrás subir tus cambios al repositorio remoto seleccionado.
ramas
Las ramas son utilizadas para desarrollar funcionalidades aisladas unas de otras. 
La rama master es la rama "por defecto" cuando creas un repositorio. 
Crea nuevas ramas durante el desarrollo y fusiónalas a la rama principal cuando termines.


Crea una nueva rama llamada "feature_x" y cámbiate a ella usando
git checkout -b feature_x

vuelve a la rama principal
git checkout master

y borra la rama
git branch -d feature_x

Una rama nueva no estará disponible para los demás a menos que subas (push) la rama a tu repositorio remoto
git push origin <branch>

actualiza & fusiona
Para actualizar tu repositorio local al commit más nuevo, ejecuta
git pull
en tu directorio de trabajo para bajar y fusionar los cambios remotos.
Para fusionar otra rama a tu rama activa (por ejemplo master), utiliza
git merge <branch>
en ambos casos git intentará fusionar automáticamente los cambios. 
Desafortunadamente, no siempre será posible y se podrán producir conflictos. 
Tú eres responsable de fusionar esos conflictos manualmente al editar los archivos mostrados por git. 
Después de modificarlos, necesitas marcarlos como fusionados con
git add <filename>

Antes de fusionar los cambios, puedes revisarlos usando
git diff <source_branch> <target_branch>

etiquetas
Se recomienda crear etiquetas para cada nueva versión publicada de un software. 
Este concepto no es nuevo, ya que estaba disponible en SVN. Puedes crear una nueva etiqueta llamada 1.0.0 ejecutando
git tag 1.0.0 1b2e1d63ff
1b2e1d63ff se refiere a los 10 caracteres del commit id al cual quieres referirte con tu etiqueta. Puedes obtener el commit id con
git log
también puedes usar menos caracteres que el commit id, pero debe ser un valor único.

reemplaza cambios locales
En caso de que hagas algo mal (lo que seguramente nunca suceda ;) puedes reemplazar cambios locales usando el comando
git checkout -- <filename>

Este comando reemplaza los cambios en tu directorio de trabajo con el último contenido de HEAD. 
Los cambios que ya han sido agregados al Index, así como también los nuevos archivos, se mantendrán sin cambio.

Por otro lado, si quieres deshacer todos los cambios locales y commits, puedes traer la última versión del servidor 
y apuntar a tu copia local principal de esta forma
git fetch origin
git reset --hard origin/master

datos útiles
Interfaz gráfica por defecto
gitk

Colores especiales para la consola
git config color.ui true

Mostrar sólo una línea por cada commit en la traza
git config format.pretty oneline

Agregar archivos de forma interactiva
git add -i

enlaces & recursos
clientes gráficos
GitX (L) (OSX, open source)
Tower (OSX)
Source Tree (OSX, free)
GitHub for Mac (OSX, free)
GitBox (OSX)
guías
Git Community Book
Pro Git
Think like a git
GitHub Help
A Visual Git Guide





Para subir tu proyecto a Git, sigue estos pasos:

1. Inicializa un repositorio Git en tu proyecto local si aún no lo has hecho. Puedes hacerlo ejecutando el siguiente comando en la raíz de tu proyecto:

   ```
   git init
   ```

2. Agrega los archivos y directorios que deseas incluir en el repositorio. Puedes usar el comando `git add` seguido de los nombres de los archivos o directorios, o utilizar `git add .` para agregar todos los archivos en el directorio actual y sus subdirectorios:

   ```
   git add .
   ```

3. Realiza un commit para guardar los cambios en tu repositorio local:

   ```
   git commit -m "Descripción del commit"
   ```

   Reemplaza "Descripción del commit" con una breve descripción de los cambios realizados en este commit.

4. Ahora, necesitas crear un repositorio remoto en un servicio de alojamiento Git como GitHub o GitLab. Sigue las instrucciones en el sitio web del servicio para crear un nuevo repositorio vacío.

5. Una vez creado el repositorio remoto, obtén la URL del repositorio.

6. Conecta tu repositorio local con el repositorio remoto utilizando el siguiente comando:

   ```
   git remote add origin URL_del_repositorio_remoto
   ```

   Reemplaza "URL_del_repositorio_remoto" con la URL del repositorio remoto que has obtenido anteriormente.

7. Ahora, puedes subir tus cambios al repositorio remoto ejecutando el siguiente comando:

   ```
   git push -u origin master
   ```

   Esto empujará los cambios de tu rama "master" (rama principal) a la rama "master" en el repositorio remoto. Si deseas utilizar una rama diferente, reemplaza "master" por el nombre de la rama correspondiente.

8. ¡Enhorabuena! Tu proyecto ahora está subido a Git y está disponible en el repositorio remoto. Puedes realizar más cambios, commits y push para mantener tu repositorio actualizado.

Recuerda que estos son solo los pasos básicos para subir tu proyecto a Git. También puedes explorar otras funcionalidades de Git, como ramas, fusiones, etiquetas, entre otros, para trabajar de manera más eficiente en tu proyecto.












Si necesitas cambiar la URL de un repositorio Git existente, puedes seguir estos pasos:

1. Abre una terminal o línea de comandos y navega hasta el directorio del repositorio local en el que deseas cambiar la URL.

2. Verifica la URL actual del repositorio ejecutando el siguiente comando:

   ```
   git remote -v
   ```

   Esto mostrará las URLs del repositorio remoto actualmente configuradas, por ejemplo, "origin".

3. Elimina la configuración existente del repositorio remoto ejecutando el siguiente comando:

   ```
   git remote remove origin
   ```

   Reemplaza "origin" con el nombre del control remoto que deseas eliminar si es diferente.

4. Agrega la nueva URL del repositorio remoto ejecutando el siguiente comando:

   ```
   git remote add origin Nueva_URL
   ```

   Reemplaza "Nueva_URL" con la nueva URL del repositorio Git al que deseas vincular tu repositorio local.

5. Verifica nuevamente la configuración del repositorio remoto para asegurarte de que la nueva URL se haya configurado correctamente:

   ```
   git remote -v
   ```

   Esto debería mostrar la nueva URL del repositorio remoto.

6. Si tienes cambios pendientes en tu repositorio local, realiza un push para sincronizar los cambios con el nuevo repositorio remoto:

   ```
   git push -u origin master
   ```

   Reemplaza "master" con el nombre de la rama correspondiente si estás trabajando en una rama diferente.

Con estos pasos, has cambiado la URL del repositorio Git en tu repositorio local y lo has vinculado a la nueva URL del repositorio remoto. Asegúrate de tener los permisos adecuados para acceder al nuevo repositorio remoto y de que la URL sea correcta antes de realizar los cambios.
